@use 'sass:math';

/**
 * https://css-tricks.com/snippets/sass/strip-unit-function/
 *
 * @param  {[type]} $number [description]
 * @return {[type]}         [description]
 */

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return math.div($number, ($number * 0 + 1));
    }
    @return $number;
}

/** _decimal.scss | MIT License | gist.github.com/terkel/4373420
*
* Round a number to specified digits.
* @param  {Number} $number A number to round
* @param  {Number} [$digits:0] Digits to output
* @param  {String} [$mode:round] (round|ceil|floor) How to round a number
* @return {Number} A rounded number
* @example
*     decimal-round(0.333)    => 0
*     decimal-round(0.333, 1) => 0.3
*     decimal-round(0.333, 2) => 0.33
*     decimal-round(0.666)    => 1
*     decimal-round(0.666, 1) => 0.7
*     decimal-round(0.666, 2) => 0.67
*/

@function decimal-round($number, $digits: 2) {
    $n: 1;

    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }

    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @return math.div( round($number * $n), $n);
}
