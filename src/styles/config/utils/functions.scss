@use 'sass:math';

/**
 * Get breakpoint size from $breakpoints map
 */

@function get-bp($key) {
    @if map-has-key($breakpoints, $key) {
        @return map-get($breakpoints, $key);
    }
    @warn '`# {$key}` not defined in $breakpoints.';
    @return null;
}

/**
 * Get color hex from $colors map
 */

@function get-color($key) {
    @if map-has-key($colors, $key) {
        @return map-get($colors, $key);
    }
    @warn '`# {$key}` not defined, please add to $colors in styles/utils/variables';
    @return null;
}

/**
 * Get font family from $font map
 */

@function get-font($name) {
    @if map-has-key($fonts, $name) {
        @return map-get($fonts, $name);
    }
    @warn '`# {$key}` not defined, please add font to $fonts in styles/utils/variables';
    @return null;
}

/**
 * Get grid option from $grid map
 */

@function get-option($name) {
    @if map-has-key($grid, $name) {
        @return map-get($grid, $name);
    }
    @warn '`# {$key}` not defined, please add to $grid in styles/utils/variables';
    @return null;
}

/**
 * Converts Photoshop 'leading' to css line-height
 *
 * @param  {int} $font-size font-size in pixels
 * @param  {int} $leading   'leading' pixel value in photoshop
 *
 * @return {int}            line-height in %
 */

@function calc-leading($font-size, $leading: 19) {
    @if 1 == $leading {
        @return 1;
    }
    @return $font-size + math.div($leading, 2) * 1%;
}

/**
 * Converts Photoshop 'tracking' to css letter-spacing
 *
 * @param  {int} $spacing 'tracking' numeric value in photoshop
 *
 * @return {int}          letter-spacing in rem
 */

@function calc-spacing($spacing) {
    @return math.div($spacing, 1000) * 1rem;
}

/**
 * Converts font-size pixel to rem units
 *
 * @param  {int} $size font-size in pixels
 *
 * @return {int}       font-size in rem
 */

@function calc-rem($font-size) {
    @return math.div($font-size, get-font('base-size')) * 1rem;
}

/**
 *
 * GRID FUNCTIONS
 *
 */

/**
 * Columns span
 */

@function span($span, $grid-columns: get-opt('columns')) {
    $column: math.div(100, $grid-columns);
    @return math.div(percentage($span * $column), 100);
}

/**
 * Get gutter width
 */

@function gutter($half: false) {
    $gutter: get-option('gutter');
    @if true == $half {
        @return math.div($gutter, 2);
    }
    @return $gutter;
}
